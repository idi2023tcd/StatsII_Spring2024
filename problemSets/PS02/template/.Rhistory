exp(confint(mod)) # Remember: transform to odds ratio using exp()
# An option for making a data.frame of confidence intervals and coefficients
confMod <- data.frame(cbind(lower = exp(confint(mod)[,1]),
coefs = exp(coef(mod)),
upper = exp(confint(mod)[,2])))
exp(confint(mod)) # Remember: transform to odds ratio using exp()
# An option for making a data.frame of confidence intervals and coefficients
confMod <- data.frame(cbind(lower = exp(confint(mod)[,1]),
coefs = exp(coef(mod)),
upper = exp(confint(mod)[,2])))
confMod
###
p=ggplot(data = confMod, mapping = aes(x = row.names(confMod), y = coefs)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), colour = "red") +
coord_flip() +
labs(x = "Terms", y = "Coefficients")+
theme_bw() + theme(panel.grid=element_blank())+
ggtitle("Confidence interval plot")
p
###
ggplotly(p)
##################################################################################
##########################################################
# Then use this to make a plot
##
install.packages("plotly") # For interactive plot
library("plotly")
###
ggplotly(p)
# This time, let's analyse the data in more detail
xtabs(~ hsgrad + nonwhite, data = graduation)
with(graduation, table(hsgrad, nonwhite))
summary(graduation)
# Find errors
graduation[which(graduation$nsibs < 0),]
graduation <- graduation[-which(graduation$nsibs < 0),]
# Model one:
graduation$nsibs_cut <- cut(graduation$nsibs,
breaks = c(0, 0.9, 1, 3, Inf),
include.lowest = TRUE,
labels = c("None", "One", "Two_Three", "FourPlus"))
mod_1 <- glm(hsgrad ~.,
data = graduation[,!names(graduation) %in% c("nsibs")],
family = "binomial")
summary(mod_1)
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c("tidyverse", "car"),  pkgTest)
## More on logits: visualising and goodness of fit
# We'll use last weeks' data again
graduation <- read.table("http://statmath.wu.ac.at/courses/StatsWithR/Powers.txt",
stringsAsFactors = TRUE)
# This time, let's analyse the data in more detail
xtabs(~ hsgrad + nonwhite, data = graduation)
with(graduation, table(hsgrad, nonwhite))
summary(graduation)
graduation[which(graduation$nsibs < 0),]
graduation <- graduation[-which(graduation$nsibs < 0),]
# Model one:
graduation$nsibs_cut <- cut(graduation$nsibs,
breaks = c(0, 0.9, 1, 3, Inf),
include.lowest = TRUE,
labels = c("None", "One", "Two_Three", "FourPlus"))
mod_1 <- glm(hsgrad ~.,
data = graduation[,!names(graduation) %in% c("nsibs")],
family = "binomial")
summary(mod_1)
# A more parsimonious model
mod_2 <- glm(hsgrad ~ nsibs_cut + income + nonwhite,
data = graduation,
family = "binomial")
summary (mod_2)
# Make a data frame
predicted_data <- data.frame(
hsgrad = graduation$hsgrad,
mod_1_hat = mod_1$fitted.values,
mod_2_hat = mod_2$fitted.values
)
predicted_data
###
# Reorder and plot
install.packages("plotly")
####
p1=predicted_data %>%
arrange(mod_1_hat) %>%
mutate(rank = row_number()) %>%
ggplot(aes(rank, mod_1_hat)) +
geom_point(aes(colour = hsgrad), alpha = 0.5) +
scale_y_continuous(limits = c(0,1)) +
theme_bw() + theme(panel.grid=element_blank())+
ggtitle("Logistic plot for binomial family")
ggplotly(p1)
###################
p3=predicted_data %>%
arrange(mod_2_hat) %>%
mutate(rank = row_number()) %>%
ggplot(aes(rank, mod_2_hat)) +
geom_point(aes(colour = hsgrad), alpha = 0.5) +
scale_y_continuous(limits = c(0,1))+
theme_bw() + theme(panel.grid=element_blank())+
ggtitle("Logistic plot for binomial family")
ggplotly(p3)
####################
# McFadden's R squared
# Approach 1:
mod_1$null.deviance == mod_2$null.deviance
mod_1$null.deviance # Answer: 1527.596
####
ll.null <- mod_1$null.deviance/-2 # Answer: -763.7979
ll.fit_1 <- mod_1$deviance/-2 # answer:  -558.4349
ll.fit_2 <- mod_2$deviance/-2 # Answer: -690.4762
r.sq.mod_1 <- (ll.null-ll.fit_1)/ll.null # Answer:  0.2688709
r.sq.mod_2 <- (ll.null-ll.fit_2)/ll.null # Answer: 0.09599622
# Approach 2:
mod_null <- glm(hsgrad ~ 1, data = graduation, family = "binomial")
1 - logLik(mod_1)/logLik(mod_null) # Answer: 'log Lik.' 0.2688709 (df=10)
1 - logLik(mod_2)/logLik(mod_null) # Answer:
# P value:
1 - pchisq(2*(ll.fit_1 - ll.null), df = (length(mod_1$coefficients)-1))
1 - pchisq(2*(ll.fit_2 - ll.null), df = (length(mod_2$coefficients)-1))
#Number of Fisher Scoring iterations: 4
######################################
#PAGE 321 # FROM THE P-VALUES FOR THE REGRESSION COEFFICIENTS (the last column), you can see that gender, presence of children
#education, and occupation may not make a significant contribution to the equation(you can't reject the hypothesis that the
# parameters are 0).
#Let's fit a 2nd equation without them and test whether this reduced model fits the data as well:
##
fit.reduced <- glm(ynaffairs ~ age + yearsmarried + religiousness + rating, family = binomial(link = "logit"),
data = Affairs)
summary(fit.reduced)
####
pset2_data<-climateSupport
head(pset2_data)
##
## Fit logistic regression model
fit_myFull_logit_supporting_policy <- glm (choice ~ countries + sanctions, family=binomial(link="logit"),
data=pset2_data)
# Summary of the logistic regression model
summary(fit_myFull_logit_supporting_policy)
# Plot the effects of the 'countries' variable
plot(allEffects(fit_myFull_logit_supporting_policy))
#########################
## SLIDE 31. Logit Example: Trump vs Age #####
###
trump_data <- read.csv("C:/NewGithubFolder/StatsII_Spring2024/datasets/Trump_select.csv")
head(trump_data)
names(trump_data)# "age" ;"age_factor" ;"race" ;"educ"; "income" ;"ideology_factor";"gender_factor" ;"SelectTrump";"condition"; "openResponse"; "codeCorrect"
################
# Let's fit a logit model for selecting new story about Trump (SelectTrump) with age.
# Run logit model with y=SelectTrump - is a binary variable (0; 1) and x=age
######################
#
logit_base <- glm(SelectTrump ~ age, data=trump_data, family=binomial(link="logit"))
summary(logit_base)
#######
table(pset2_data$countries)
head(trump_data)
#######
table(pset2_data$countries)
#Residual deviance: 11568  on 8494  degrees of freedom
#AIC: 11580
#
#Number of Fisher Scoring iterations: 4
#################################################################
#From the p-values for regression coefficients(the last column), I have noticed that countries.Q("coefficient for quadratic
#line") may not make a significant contribution to the equation (I can't reject the hypothesis that the parameters are zero).
##
#I will fit the second equation/model without countries.Q and test if the reduced model fits the data as well:
##
fit_Reduced <- glm(choice~ countries.L + sanction.L + sanction.Q + sanction.C, family=binomial(link="logit"),
data=pset2_data )
##
View(Affairs)
# Summary of the logistic regression model
summary(fit_myFull_logit_supporting_policy)
#### APPLIED STATISTICAL ANALYSIS II
######
# Student Name: Idi Amin Da Silva
# Student Number: 233 722 25
##########
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c(),  pkgTest)
# set wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#####################
# Problem 1
#####################
#
# load data
load(url("https://github.com/ASDS-TCD/StatsII_Spring2024/blob/main/datasets/climateSupport.RData?raw=true"))
####
pset2_data<-climateSupport
head(pset2_data)
dim(pset2_data) # Rows/Observations= 8500; Columns/Variables=3
names(pset2_data) # "choice" ;   "countries" ; "sanctions"
##
## Fit logistic regression model
fit_myFull_logit_supporting_policy <- glm (choice ~ countries + sanctions, family=binomial(link="logit"),
data=pset2_data)
# Summary of the logistic regression model
summary(fit_myFull_logit_supporting_policy)
#Null deviance: 11783  on 8499  degrees of freedom
#Residual deviance: 11568  on 8494  degrees of freedom
#AIC: 11580
#
#Number of Fisher Scoring iterations: 4
#################################################################
#### Now I am interested in Calculating the Global Null Hypothesis and p-value.
# Perform likelihood ratio test
#
my_lr_test <- anova(fit_myFull_logit_supporting_policy, test = "Chisq")# This line of the code assesses the significance of the
#predictor variables(countries and sanctions) in explaining the response variable (choice) in logistic regression model.
my_lr_test
my_global_null_p_value <- my_lr_test$"Pr(>Chi)"
print(my_global_null_p_value) # # Print the p-value
#################################################################################
##################################################################
# Question 2
###
#(2a)
coef_160 <- coef(fit_myFull_logit_supporting_policy)["sanctions"]
coef_160
#Null deviance: 11783  on 8499  degrees of freedom
#Residual deviance: 11568  on 8494  degrees of freedom
#AIC: 11580
#
#Number of Fisher Scoring iterations: 4
##################################################
## 2nd Method:
##
# Fit logistic regression model
fit_myFull_logit_supporting_policy <- glm(choice ~ countries + sanctions,
family = binomial(link = "logit"),
data = pset2_data)
# Summary of the logistic regression model
summary(fit_myFull_logit_supporting_policy)
#################################################################################
##################################################################
# Question 2
###
#(2a)
coef_160 <- coef(fit_myFull_logit_supporting_policy)["sanctions"]
coef_160
exp(coeff(fit_myFull_logit_supporting_policy))
exp(coef(fit_myFull_logit_supporting_policy))
## Answer:
# (Intercept)     countries.L    countries.Q   sanctions.L   sanctions.Q   sanctions.C
# 0.9943507        1.5816245      0.9900994     0.7585609     0.8343637     1.1620743
#######################################################################
## I would like to explore the dataset in more detail and I am interested in finding the 95% confidence interval for
# estimated coefficients/parameters:
exp(confint(fit_myFull_logit_supporting_policy))
#########################
## SLIDE 31. Logit Example: Trump vs Age #####
###
trump_data <- read.csv("C:/NewGithubFolder/StatsII_Spring2024/datasets/Trump_select.csv")
head(trump_data)
################
# Let's fit a logit model for selecting new story about Trump (SelectTrump) with age.
# Run logit model with y=SelectTrump - is a binary variable (0; 1) and x=age
######################
#
logit_base <- glm(SelectTrump ~ age, data=trump_data, family=binomial(link="logit"))
summary(logit_base)
# An option for making a data.frame of confidence intervals and coefficients
confMod1 <- data.frame(cbind(lower = exp(confint(fit_myFull_logit_supporting_policy)[,1]),
coefs = exp(coef(fit_myFull_logit_supporting_policy)),
upper = exp(confint(fit_myFull_logit_supporting_policy)[,2])))
confMod1
exp(confint(fit_myFull_logit_supporting_policy))
library(plotly)
library(AER)
library(GGally)
library(tibble)
library(tidyverse)
library(tigerstats)
p_inter=plot(allEffects(fit_myFull_logit_supporting_policy))
##
## Answer: 1.378383e-32 9.271817e-15
####################################################################
#################################################################
# Plotting the logistic regression model
# I have decided to use the 'effects' package for visualizing the effects of predictors
##
install.packages("effects")
p_inter=plot(allEffects(fit_myFull_logit_supporting_policy))
##
## Fit logistic regression model
fit_myFull_logit_supporting_policy <- glm (choice ~ countries + sanctions, family=binomial(link="logit"),
data=pset2_data)
# Summary of the logistic regression model
summary(fit_myFull_logit_supporting_policy)
library(effects)
p_inter=plot(allEffects(fit_myFull_logit_supporting_policy))
ggplotly(p_inter)
p=plot(allEffects(fit_myFull_logit_supporting_policy))
ggplotly(p)
#  Option 2:
#  Parse column names as a vector to colClasses
graduation <- read.table("http://statmath.wu.ac.at/courses/StatsWithR/Powers.txt",
colClasses = c("hsgrad" = "factor",
"nonwhite" = "factor",
"mhs" = "factor",
"fhs" = "factor",
"intact" = "factor"))
head(graduation)
# Drop problematic cases
graduation <- graduation[-which(graduation$nsibs < 0),]
head(graduation)
#
#  Option 3:
#  Coerce from a character vector to a logical vector
graduation$hsgrad <- as.logical(as.numeric(as.factor(graduation$hsgrad))-1)
head(graduation$hsgrad)
###
#  Option 4:
#  Use ifelse() with as.logical()...
as.logical(ifelse(graduation$hsgrad == "Yes", 1, 0))
## a) Run the logit regression
mod <- glm(hsgrad ~ ., # period functions as omnibus selector (kitchen sink additive model)
data = graduation,
family = "binomial")
head(pset2_data)
####
with(graduation, table(graduation$hsgrad))
pset2_data$choice <- as.logical(as.numeric(as.factor(pset2_data$choice))-1)
head(pset2_data$choice)
####
Fit_myFull_logit_supporting_policy <- glm (choice ~ countries + sanctions, family=binomial(link="logit"), data=pset2_data)
summary(Fit_myFull_logit_supporting_policy)
##############################
## My Method:
fit_myFull_logit_supporting_policy <- glm (choice ~ countries + sanctions, family=binomial(link="logit"), data=pset2_data)
summary(fit_myFull_logit_supporting_policy)
pset2_data$choice <- as.numeric(as.logical(as.factor(pset2_data$choice))-1)
head(pset2_data$choice)
####
Fit_myFull_logit_supporting_policy <- glm (choice ~ countries + sanctions, family=binomial(link="logit"), data=pset2_data)
summary(Fit_myFull_logit_supporting_policy)
head(pset2_data)
# pset2_data$choice <- as.numeric(as.logical(as.factor(pset2_data$choice))-1)
# head(pset2_data$choice)
########
pset2_data$choice <- ifelse(pset2_data$choice == TRUE, 1, 0)
head(pset2_data$choice)
####
Fit_myFull_logit_supporting_policy <- glm (choice ~ countries + sanctions, family=binomial(link="logit"), data=pset2_data)
summary(Fit_myFull_logit_supporting_policy)
####
pset2_data<-climateSupport
head(pset2_data)
View(pset2_data)
# pset2_data$choice <- as.numeric(as.logical(as.factor(pset2_data$choice))-1)
# head(pset2_data$choice)
########
pset2_data$choice <- ifelse(pset2_data$choice == TRUE, 0, 1)
head(pset2_data$choice)
# pset2_data$choice <- as.numeric(as.logical(as.factor(pset2_data$choice))-1)
# head(pset2_data$choice)
########
pset2_data$choice <- ifelse(pset2_data$choice == TRUE, 0, 1)
head(pset2_data$choice)
####
Fit_myFull_logit_supporting_policy <- glm (choice ~ countries + sanctions, family=binomial(link="logit"), data=pset2_data)
head(pset2_data)
View(pset2_data)
# pset2_data$choice <- as.numeric(as.logical(as.factor(pset2_data$choice))-1)
# head(pset2_data$choice)
########
pset2_data$choice <- ifelse(pset2_data$choice == TRUE, 0, 1)
head(pset2_data$choice)
with(pset2_data, table(pset2_data$choice))
###
# Assuming 'choice' column contains logical values
# Convert 'supported' to 1 and 'not supported' to 0
pset2_data$choice <- as.numeric(pset2_data$choice == "supported")
#####
head(pset2_data)
View(pset2_data)
##
with(pset2_data, table(pset2_data$choice))
####
pset2_data<-climateSupport
head(pset2_data)
View(pset2_data)
####
pset2_data<-climateSupport
###
# Assuming 'choice' column contains logical values
# Convert 'Supported' to 1 and 'Not supported' to 0
pset2_data$choice <- ifelse(pset2_data$choice == "Supported", 1, 0)
#####
head(pset2_data)
##
with(pset2_data, table(pset2_data$choice))
View(pset2_data)
####
pset2_data<-climateSupport
#########################
# In the 'choice' column/variable contains logical values Not supported and Supported
# I Convert 'Supported' to 1 and 'Not supported' to 0
pset2_data$choice <- ifelse(pset2_data$choice == "Supported", 1, 0)
#####
head(pset2_data)
View(pset2_data)
dim(pset2_data) # Rows/Observations= 8500; Columns/Variables=3
names(pset2_data) # "choice" ;   "countries" ; "sanctions"
##
with(pset2_data, table(pset2_data$choice)) # This line of the code provide the frequency of Not supported and Supported
##############################
## My Method:
fit_myFull_logit_supporting_policy <- glm (choice ~ countries + sanctions, family=binomial(link="logit"), data=pset2_data)
summary(fit_myFull_logit_supporting_policy)
#  Option 2:
#  Parse column names as a vector to colClasses
graduation <- read.table("http://statmath.wu.ac.at/courses/StatsWithR/Powers.txt",
colClasses = c("hsgrad" = "factor",
"nonwhite" = "factor",
"mhs" = "factor",
"fhs" = "factor",
"intact" = "factor"))
install.packages("effects")
install.packages("plotly")
library(effects)
library(plotly)
# Fit logistic regression model (replace with your actual model)
fit_myFull_logit_supporting_policy <- glm(choice ~ countries + sanctions,
family = binomial(link = "logit"),
data = pset2_data)
# Obtain effects of predictors
effects_plot <- allEffects(fit_myFull_logit_supporting_policy)
effects_plot
summary(effects_plot)
####
# Convert effects plot to a ggplot object
ggplot_obj <- plot(effects_plot)
# Convert ggplot object to plotly object
plotly_obj <- ggplotly(ggplot_obj)
# Display the interactive plot
plotly_obj
####
pset2_data<-climateSupport
#########################
# In the 'choice' column/variable contains logical values Not supported and Supported
# I Convert 'Supported' to 1 and 'Not supported' to 0
pset2_data$choice <- ifelse(pset2_data$choice == "Supported", 1, 0)
#####
head(pset2_data)
View(pset2_data)
dim(pset2_data) # Rows/Observations= 8500; Columns/Variables=3
names(pset2_data) # "choice" ;   "countries" ; "sanctions"
##
with(pset2_data, table(pset2_data$choice)) # This line of the code provide the frequency of Not supported and Supported
#  0         1
# 4264    4236
#####################
##
## Fit logistic regression model
fit_myFull_logit_supporting_policy <- glm (choice ~ countries + sanctions, family=binomial(link="logit"),
data=pset2_data)
# Summary of the logistic regression model
summary(fit_myFull_logit_supporting_policy)
effects_plot <- allEffects(fit_myFull_logit_supporting_policy)
summary(effects_plot)
effects_plot <- allEffects(fit_myFull_logit_supporting_policy)
summary(effects_plot)
odds_ratio_15_5 <- exp(0.4803396 - 0.5612953)
odds_ratio_15_5
#Upper 95 Percent Confidence Limits
#sanctions
# None          5%        15%         20%
#0.5350674  0.5824294   0.5018621   0.4593921
#######################################################################################################
###################################################################################################
#(2b)
## Given values
countries_value <- 0.5006076  # Estimated probability for 80 of 192 countries
sanctions_value <- 0.5136380   # Estimated probability for no sanctions
# Calculate the estimated probability
probability <- countries_value * sanctions_value
# Output the result
probability
############################################################################################
#(2c)
fit_interaction_logit <- glm(choice ~ countries * sanctions, family = binomial(link = "logit"), data = pset2_data)
summary(fit_interaction_logit)
