ctable1 <- coef(summary(multinom_model_ordered))
ctable1
p <- pnorm(abs(ctable1[, "t-value"]), lower.tail=FALSE)*2
(p <- 1 - pnorm(abs(ctable1[, "t-value"]), lower.tail=FALSE)*2)
(ctable1 <- cbind(ctable1, "p-value"=p))
#
#Intercepts:
#                     Value   Std. Error    t value
#negative|no change -0.5325   0.1097        -4.8544
#no change|positive -0.5118    0.1097       -4.6671
#
#Residual Deviance: 4687.689
#AIC: 4695.689
#######################
## Calculating the p-value
ctable1 <- coef(summary(multinom_model_ordered)) # Extract coefficient summary
p <- 2 * (1 - pnorm(abs(ctable1[, "t value"]))) # Calculate the p-value
ctable1 <- cbind(ctable1, "p-value" = p) ## Combine coefficient summary and p-values
print(ctable1) # Print the results
## Answer:
#                     Value      Std. Error   t value      p-value
#REGDemocracy        0.3984828  0.07518478    5.300046   1.157735e-07
#OILNot Exceed 50%   0.1987196  0.11571711    1.717288   8.592653e-02
#negative|no change -0.5324600  0.10968546   -4.854426   1.207358e-06
#no change|positive -0.5117652  0.10965270   -4.667147   3.054110e-06
#####
# Calculating confidence intervals:
(ci <- confint(multinom_model_ordered))
## Answer:
#                          2.5 %       97.5 %
#REGDemocracy           0.25165482    0.5464341
#OILNot Exceed 50%      -0.03019571   0.4237548
####
# Converting to odds ratio:
exp(cbind(OR=coef(multinom_model_ordered), ci))
ftable(xtabs(~ gender + year + attitude, data = workingMoms))
##############
# Tutorial 5 Ordered and Multinomial Logistic Regression #
##############
###################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c(),  pkgTest)
###########
library(MASS)
library(nnet)
library(ggplot2)
workingMoms <- read.table("http://statmath.wu.ac.at/courses/StatsWithR/WorkingMoms.txt", header=T)
head(workingMoms)
dim(workingMoms)# Rows/Columns=2293; Columns/Variables=7
names(workingMoms) # "age";   "education";  "prestige";   "gender";    "year"  ;    "race" ;     "attitude"
#########
# EDA
summary(workingMoms)
ftable(xtabs(~ gender + year + attitude, data = workingMoms))
# do some wrangling
workingMoms$attitude <- factor(workingMoms$attitude,
levels = c("SD", "D", "A", "SA"),
labels = c("Strongly Disagree",
"Disagree",
"Agree",
"Strongly Agree"))
workingMoms$gender <- as.factor(workingMoms$gender)
workingMoms$race <- factor(workingMoms$race,
levels = c(0,1),
labels = c("Non-white", "White"))
workingMoms$year <- factor(workingMoms$year,
levels = c("Year1977", "Year1989"),
labels = c("1977", "1989"))
ftable(xtabs(~ gender + year + attitude, data = workingMoms))
ggplot(workingMoms, aes(x=attitude, y=prestige, fill=attitude)) +
geom_boxplot() +
stat_boxplot(geom="errorbar", width=0.5)+
geom_point()+
geom_jitter(alpha = 0.3) +
scale_x_discrete(labels=function(x){sub("\\s", "\n", x)}) +
theme(axis.text.x = element_text(angle = 45)) +
theme_bw()+
facet_grid(gender ~ year)
ord.log <- polr(attitude ~ ., data = workingMoms, Hess = TRUE)
summary(ord.log)
# Calculate a p value
ctable <- coef(summary(ord.log))
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2
(ctable <- cbind(ctable, "p value" = p))
##
# My Method of calculating p-value:
ctable2 <- coef(summary(ord.log)) # Extract coefficient summary
p <- 2 * (1 - pnorm(abs(ctable2[, "t value"]))) # Calculate the p-value
ctable2 <- cbind(ctable2, "p-value" = p) ## Combine coefficient summary and p-values
print(ctable2) # Print the results
(
##
# Calculate confidence intervals
(ci <- confint(ord.log))
# convert to odds ratio
exp(cbind(OR = coef(ord.log), ci))
# convert to odds ratio
exp(cbind(OR = coef(ord.log), ci))
##
# Calculate confidence intervals
(ci <- confint(ord.log))
# convert to odds ratio
exp(cbind(OR = coef(ord.log), ci))
# load data
#mexico_elections <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsII_Spring2024/main/datasets/MexicoMuniData.csv")
###
mexico_elections <- read.csv("C:/NewGithubFolder/StatsII_Spring2024/datasets/MexicoMuniData.csv")
#
head(mexico_elections)
names(mexico_elections)#"MunicipCode" ; "pan.vote.09"; "marginality.06"; "PAN.governor.06"; "PAN.visits.06"; "competitive.district"
dim(mexico_elections) # Rows/Observations=2407; Columns/Variables=6
str(mexico_elections)
#Residual Deviance: 4678.73
#AIC: 4690.73
#####################################################################################################################
#########################################################################################################################
# Lecture WEEK 9: Count Data - Poisson Regression ##
##
# R code:
elephant <- read.csv("C:/NewGithubFolder/StatsII_Spring2024/datasets/elephants.csv")
head(elephant)
nameselephant
names(elephant)
dim(elephant)
str(elephant)
ggplot(elephant, aes(x=Age, y=Matings))+
geom_point(size=2, colors=I("blue"))+
geom_jitter()+
xlabs("Elephant Age")+
ylabs(("Elephant Matings"))+
theme_bw()+
theme(panel.grid=element_blank())
ggplot(elephant, aes(x=Age, y=Matings))+
geom_point(size=2, colors=I(blue))+
geom_jitter()+
xlabs("Elephant Age")+
ylabs(("Elephant Matings"))+
theme_bw()+
theme(panel.grid=element_blank())
ggplot(elephant, aes(x=Age, y=Matings))+
geom_point(size=2)+
geom_jitter()+
xlabs("Elephant Age")+
ylabs(("Elephant Matings"))+
theme_bw()+
theme(panel.grid=element_blank())
ggplot(elephant, aes(x=Age, y=Matings))+
geom_point(size=2)+
geom_jitter()+
xlab("Elephant Age")+
ylab(("Elephant Matings"))+
theme_bw()+
theme(panel.grid=element_blank())
ggplot(elephant, aes(x=Age, y=Matings))+
geom_point(size=2)+
geom_jitter()+
xlab("Elephant Age")+
ylab(("Elephant Matings"))+
theme_bw()+
theme(panel.grid=element_blank())+
ggtitle("Scatterplot Elephant Age Vs Elephant Mates")
ggplot(elephant, aes(x=Age, y=Matings))+
geom_point(size=2)+
geom_jitter()+
geom_smooth(method="lm", formula=y~x, se=TRUE)+
xlab("Elephant Age")+
ylab(("Elephant Matings"))+
theme_bw()+
theme(panel.grid=element_blank())+
ggtitle("Scatterplot Elephant Age Vs Elephant Mates")
######
# Slide 10 # Zoology Example: Poisson/Count Regression Model
##
# 1st. Method:
elephant_poisson <- glm( Matings ~ Age, data=elephant, family=poisson)
summay(elephant_poisson )
######
# Slide 10 # Zoology Example: Poisson/Count Regression Model
##
# 1st. Method:
elephant_poisson <- glm( Matings ~ Age, data=elephant, family=poisson)
summary(elephant_poisson )
#Number of Fisher Scoring iterations: 5
############
# Predicted Equation: ln(lambda_i)= -1.58201 + 0.06869* X_1i
###
exp(coef(elephant_poisson))
## Answer:
# (Intercept)         Age
# 0.2055619       1.0711071
##############################################
# 2nd. Method: Performing the Poisson/Count Regression
#
Elephant_poisson <- glm( Matings ~ Age, data=elephant, family=link(log))
######
# Slide 10 # Zoology Example: Poisson/Count Regression Model
##
# 1st. Method:
elephant_poisson <- glm( Matings ~ Age, data=elephant, family=poisson())
summary(elephant_poisson )
## Answer:
# (Intercept)         Age
# 0.2055619       1.0711071
##############################################
# Suppose we want to perform the Robust Poisson Regression - This method will help us to dealt with outlying:
##
install.packages("robustbase")
library("robustbase")
###
Elephant_poisson <- glmRob( Matings ~ Age, data=elephant, family=poisson)
# Fit the Robust Poisson Regression model
Elephant_poisson <- glmRob(Matings ~ Age, data = elephant, family = poisson())
#Number of Fisher Scoring iterations: 5
############
# Predicted Equation: ln(lambda_i)= -1.58201 + 0.06869* X_1i
###
exp(coef(elephant_poisson))
summary(elephant_poisson )
## Answer:
# (Intercept)         Age
# 0.2055619       1.0711071
##############################################
#To Calculate the log likelihood and  BIC :
##
# Calculate log-likelihood
log_likelihood <- logLik(elephant_poisson)
# Number of parameters (including intercept)
num_parameters <- length(coef(elephant_poisson))
# Calculate BIC
bic <- -2 * log_likelihood + num_parameters * log(nrow(elephant))
cat("BIC:", bic, "\n")
cat("Log-Likelihood:", log_likelihood, "\n")
coeffs <- coefficients(poisson_elephant)
coeffs <- coefficients(elephant_poisson)
xvalues <- sort(elephant$Age)
means <- exp(coeffs[1] + coeffs[2]*xvalues)
line(xvalues, means, lty=2, col="red")
coeffs <- coefficients(elephant_poisson)
xvalues <- sort(elephant$Age)
means <- exp(coeffs[1] + coeffs[2]*xvalues)
line(xvalues, means, linetype=2, col="red")
coeffs <- coefficients(elephant_poisson)
xvalues <- sort(elephant$Age)
means <- exp(coeffs[1] + coeffs[2]*xvalues)
line(xvalues, means, linetype="dashed", col="red")
coeffs <- coefficients(elephant_poisson)
xvalues <- sort(elephant$Age)
means <- exp(coeffs[1] + coeffs[2]*xvalues)
line(xvalues, means, lty="dashed", col="red")
coeffs <- coefficients(elephant_poisson)
# Sort x values
xvalues <- sort(elephant$Age)
# Calculate means
means <- exp(coeffs[1] + coeffs[2]*xvalues)
# Create scatterplot
plot(elephant$Age, elephant$Matings, xlab = "Age", ylab = "Matings", main = "Scatterplot with Curve and Dots")
# Add curve
lines(xvalues, means, lty = 2, col = "red")
##################
#
lambda30 <- exp(coeff[1] + coeff[2]*2)
##################
#
lambda30 <- exp(coef[1] + coef[2]*2)
lambda30 <- exp(coefficients[1] + coefficients[2]*2)
lambda30 <- exp(coefficients[1] + coefficients[2]*2)
means
summary(multinom_model_unordered) # # Summary of the model
#####################
##
# Create a new column with categorical variable based on continuous/numerical variable GDPWdiff
gdp_data$GDPWdiff_category <- ifelse(gdp_data$GDPWdiff < 0, "negative",
ifelse(gdp_data$GDPWdiff == 0, "no change", "positive"))
head(gdp_data) # # View the first few rows to verify the transformation
#####################
# Problem 1
#####################
### Answer of Problem 1/Question 1
# load data
##
gdp_data <- read.csv("C:/NewGithubFolder/StatsII_Spring2024/datasets/gdpChange.csv", stringsAsFactors = F)# To Load dataset into R
head(gdp_data) # This line of the code provide the first 6 observations in the dataset
dim(gdp_data) # Rows/Observations=3721; Columns/Variables=12
names(gdp_data)# "X" ;"COUNTRY"; "CTYNAME"; "YEAR"; "GDPW"; "OIL"; "REG" ;"EDT";"GDPWlag";"GDPWdiff";"GDPWdifflag" ;"GDPWdifflag2"
str(gdp_data) # # Check the structure of the dataset
#####################
##
# Create a new column with categorical variable based on continuous/numerical variable GDPWdiff
gdp_data$GDPWdiff_category <- ifelse(gdp_data$GDPWdiff < 0, "negative",
ifelse(gdp_data$GDPWdiff == 0, "no change", "positive"))
head(gdp_data) # # View the first few rows to verify the transformation
typeof(gdp_data$GDPWdiff_category)
# Create lower and upper bounds for CIs
predicted_values$lowerBound <- predicted_values$fit - 1.96*predicted_values$se.fit
predicted_values<- cbind(predict(elephant_poisson, data.frame(Age=seq(25, 55, 5)), type="response", se.fit=TRUE),
data.frame(Age=seq(25, 55, 5)))
predicted_values$lowerBound <- predicted_values$fit - 1.96*predicted_values$se.fit
predicted_values$upperBound <- predicted_values$fit + 1.96*predicted_values$se.fit
c(predicted_values$lowerBound, predicted_values$upperBound)
predicted_values$lowerBound
predicted_values$upperBound
# Answer: 1.627079  2.108541  2.766773  3.813810  5.639833  8.609364 13.211562
#
### SLIDE 20 # Over-dispersion test in R
# Check equal variance assumption
##
overdispersiontest(elephant_poisson)
# Answer: 1.627079  2.108541  2.766773  3.813810  5.639833  8.609364 13.211562
#
### SLIDE 20 # Over-dispersion test in R
# Check equal variance assumption
##
dispersiontest(elephant_poisson)
# Answer: 1.627079  2.108541  2.766773  3.813810  5.639833  8.609364 13.211562
#
### SLIDE 20 # Over-dispersion test in R
# Check equal variance assumption
##
install.packages("AER")
library("AER")
#
dispersiontest(elephant_poisson)
#
dispersiontest(elephant_poisson)
View(gdp_data)
#######################################################################################################################
#################################################################################################################################
#PROBLEM SET III. Question 1: Part 1.
##2nd Method: Using Jeffrey Student Slides
###
##
gdp_data <- read.csv("C:/NewGithubFolder/StatsII_Spring2024/datasets/gdpChange.csv", stringsAsFactors = F)# To Load dataset into R
head(gdp_data) # This line of the code provide the first 6 observations in the dataset
dim(gdp_data) # Rows/Observations=3721; Columns/Variables=12
names(gdp_data)# "X" ;"COUNTRY"; "CTYNAME"; "YEAR"; "GDPW"; "OIL"; "REG" ;"EDT";"GDPWlag";"GDPWdiff";"GDPWdifflag" ;"GDPWdifflag2"
str(gdp_data) # # Check the structure of the dataset
#####################
##
# Create a new column with categorical variable based on continuous/numerical variable GDPWdiff
gdp_data$GDPWdiff_category <- ifelse(gdp_data$GDPWdiff < 0, "negative",
ifelse(gdp_data$GDPWdiff == 0, "no change", "positive"))
head(gdp_data) # # View the first few rows to verify the transformation
#
table(gdp_data$GDPWdiff_category)
#Answer:
#  negative  no change   positive
#   1105        16        2600
###
## Transform the REG (Regime) from binary (0;1) into the Categorical 0=Non-Democracy; 1=Democracy
gdp_data$REG <- factor(gdp_data$REG, levels=c(0, 1), labels=c("Non-Democracy", "Democracy"))
table(gdp_data$REG)
#### Answer/Output
#Non-Democracy     Democracy
#   2227             1494
########
#Transform the variable OIL from binary to Categorical Variable:
gdp_data$OIL <- ifelse(gdp_data$OIL ==1, "Exceed 50%", "Not Exceed 50%")
table(gdp_data$OIL)
head(gdp_data) # This line of the code provide the first 6 observations in the dataset
#Democracy
#             negative              39              332
#             no change             0                2
#             positive              47              1074
####################
#################################
#PROBLEM SET III. Question 1: Part 1.
# Fitting a unordered multinomial logit with as the output and setting a reference category "no change".
##
# Run the Model:
multinom_model_unordered <- multinom(GDPWdiff_category ~ REG + OIL, data = gdp_data, ref="no change")
summary(multinom_model_unordered) # # Summary of the model
#####################
# Problem 1
#####################
### Answer of Problem 1/Question 1
# load data
##
gdp_data <- read.csv("C:/NewGithubFolder/StatsII_Spring2024/datasets/gdpChange.csv", stringsAsFactors = F)# To Load dataset into R
head(gdp_data) # This line of the code provide the first 6 observations in the dataset
dim(gdp_data) # Rows/Observations=3721; Columns/Variables=12
names(gdp_data)# "X" ;"COUNTRY"; "CTYNAME"; "YEAR"; "GDPW"; "OIL"; "REG" ;"EDT";"GDPWlag";"GDPWdiff";"GDPWdifflag" ;"GDPWdifflag2"
str(gdp_data) # # Check the structure of the dataset
#####################
##
# Create a new column with categorical variable based on continuous/numerical variable GDPWdiff
gdp_data$GDPWdiff_category <- ifelse(gdp_data$GDPWdiff < 0, "negative",
ifelse(gdp_data$GDPWdiff == 0, "no change", "positive"))
head(gdp_data) # # View the first few rows to verify the transformation
#
table(gdp_data$GDPWdiff_category)
#Answer:
#  negative  no change   positive
#   1105        16        2600
##
###
## Transform the REG (Regime) from binary (0;1) into the Categorical 0=Non-Democracy; 1=Democracy
gdp_data$REG <- factor(gdp_data$REG, levels=c(0, 1), labels=c("Non-Democracy", "Democracy"))
table(gdp_data$REG)
#### Answer/Output
#Non-Democracy     Democracy
#   2227             1494
########
#Transform the variable OIL from binary to Categorical Variable:
gdp_data$OIL <- ifelse(gdp_data$OIL ==1, "Exceed 50%", "Not Exceed 50%")
table(gdp_data$REG)
table(gdp_data$OIL)
######
#Exceed 50%    Not Exceed 50%
# 374            3347
#####
ftable(xtabs(~REG + GDPWdiff_category + OIL, data=gdp_data))
#Democracy
#             negative              39              332
#             no change             0                2
#             positive              47              1074
####################
#################################
#PROBLEM SET III. Question 1: Part 1.
# Fitting a unordered multinomial logit with as the output and setting a reference category "no change".
##
# Run the Model:
multinom_model_unordered <- multinom(GDPWdiff_category ~ REG + OIL, data = gdp_data, ref="no change")
summary(multinom_model_unordered) # # Summary of the model
#Democracy
#             negative              39              332
#             no change             0                2
#             positive              47              1074
####################
#################################
#PROBLEM SET III. Question 1: Part 1.
# Fitting a unordered multinomial logit with as the output and setting a reference category "no change".
##
# Run the Model:
multinom_model_unordered <- multinom(GDPWdiff_category ~ REG + OIL, data = gdp_data, ref="no change")
summary(multinom_model_unordered) # # Summary of the model
#Residual Deviance: 4678.73
#AIC: 4690.73
################################################################
summary(gdp_data)
typeof(gdp_data$OIL)
#####################
# Problem 1
#####################
### Answer of Problem 1/Question 1
# load data
##
gdp_data <- read.csv("C:/NewGithubFolder/StatsII_Spring2024/datasets/gdpChange.csv", stringsAsFactors = F)# To Load dataset into R
head(gdp_data) # This line of the code provide the first 6 observations in the dataset
dim(gdp_data) # Rows/Observations=3721; Columns/Variables=12
names(gdp_data)# "X" ;"COUNTRY"; "CTYNAME"; "YEAR"; "GDPW"; "OIL"; "REG" ;"EDT";"GDPWlag";"GDPWdiff";"GDPWdifflag" ;"GDPWdifflag2"
str(gdp_data) # # Check the structure of the dataset
#####################
##
# Create a new column with categorical variable based on continuous/numerical variable GDPWdiff
gdp_data$GDPWdiff_category <- ifelse(gdp_data$GDPWdiff < 0, "negative",
ifelse(gdp_data$GDPWdiff == 0, "no change", "positive"))
str(gdp_data) # # Check the structure of the dataset
#####################
##
# Create a new column with categorical variable based on continuous/numerical variable GDPWdiff
gdp_data$GDPWdiff_category <- ifelse(gdp_data$GDPWdiff < 0, "negative",
ifelse(gdp_data$GDPWdiff == 0, "no change", "positive"))
head(gdp_data) # # View the first few rows to verify the transformation
#
table(gdp_data$GDPWdiff_category)
#Answer:
#  negative  no change   positive
#   1105        16        2600
##
###
## Transform the REG (Regime) from binary (0;1) into the Categorical 0=Non-Democracy; 1=Democracy
gdp_data$REG <- factor(gdp_data$REG, levels=c(0, 1), labels=c("Non-Democracy", "Democracy"))
table(gdp_data$REG)
#### Answer/Output
#Non-Democracy     Democracy
#   2227             1494
########
#Transform the variable OIL from binary to Categorical Variable:
gdp_data$OIL <- ifelse(gdp_data$OIL ==1, "Exceed 50%", "Not Exceed 50%")
table(gdp_data$OIL)
######
#Exceed 50%    Not Exceed 50%
# 374            3347
#####
ftable(xtabs(~REG + GDPWdiff_category + OIL, data=gdp_data))
typeof(gdp_data$OIL)
str(gdp_data)
head(workingMoms)
r -version
version$version.string
install.packages("FactoMineR")
library(FactoMineR) # for CA and MCA
library(FactoMineR) # for CA and MCA
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
